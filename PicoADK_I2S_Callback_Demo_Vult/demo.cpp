
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "demo.h"

void Demo__ctx_type_4_init(Demo__ctx_type_4 &_output_){
   Demo__ctx_type_4 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Demo__ctx_type_2_init(_ctx._inst1f1);
   Demo_phasorInit(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t Demo_phasor(Demo__ctx_type_4 &_ctx, fix16_t pitch, uint8_t reset){
   if(Demo_change(_ctx._inst1f1,pitch)){
      _ctx.rate = Demo_pitchToRate(pitch);
   }
   if(reset){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   else
   {
      _ctx.phase = ((_ctx.phase + _ctx.rate) % 0x10000 /* 1.000000 */);
   }
   return _ctx.phase;
}

void Demo__ctx_type_5_init(Demo__ctx_type_5 &_output_){
   Demo__ctx_type_5 _ctx;
   fix_init_array(128,0x0 /* 0.000000 */,_ctx.buffer);
   Demo__ctx_type_4_init(_ctx._inst127);
   Demo_sineInit(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t Demo_sineWave(Demo__ctx_type_5 &_ctx, fix16_t pitch, uint8_t reset){
   fix16_t phase;
   phase = Demo_phasor(_ctx._inst127,pitch,reset);
   fix16_t index_r;
   index_r = (phase << 7);
   int index_i;
   index_i = fix_to_int(fix_floor(index_r));
   fix16_t decimal;
   decimal = (index_r + (- int_to_fix(index_i)));
   fix16_t x1;
   x1 = fix_get(_ctx.buffer,index_i);
   fix16_t x2;
   x2 = fix_get(_ctx.buffer,((1 + index_i) % 128));
   fix16_t ret;
   ret = (x1 + fix_mul(decimal,(x2 + (- x1))));
   return ret;
}

void Demo_sineInit(Demo__ctx_type_5 &_ctx){
   int i;
   i = 0;
   while(i < 128){
      fix16_t w;
      w = fix_mul(0xc90 /* 0.049086 */,int_to_fix(i));
      fix16_t x;
      x = fix_sin(w);
      fix_set(_ctx.buffer,i,x);
      i = (1 + i);
   }
}

void Demo__ctx_type_6_init(Demo__ctx_type_6 &_output_){
   Demo__ctx_type_6 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   Demo__ctx_type_1_init(_ctx._inst1fd);
   _output_ = _ctx;
   return ;
}

fix16_t Demo_slide(Demo__ctx_type_6 &_ctx, fix16_t gate, fix16_t rate){
   if(Demo_edge(_ctx._inst1fd,(gate > 0x0 /* 0.000000 */))){
      _ctx.x = 0x10000 /* 1.000000 */;
   }
   fix16_t speed;
   speed = fix_mul(0xd /* 0.000200 */,rate);
   if(_ctx.x < 0x41 /* 0.001000 */){
      _ctx.x = 0x0 /* 0.000000 */;
   }
   else
   {
      _ctx.x = (_ctx.x + (- fix_mul(_ctx.x,speed)));
   }
   return _ctx.x;
}

fix16_t Demo_env(Demo__ctx_type_7 &_ctx, fix16_t input, fix16_t decay){
   if(input > 0x0 /* 0.000000 */){
      _ctx.x = (_ctx.x + fix_mul(0x28f /* 0.010000 */,(input + (- _ctx.x))));
   }
   else
   {
      _ctx.x = (_ctx.x + fix_mul(fix_mul(-0x20 /* -0.000500 */,_ctx.x),decay));
      if(_ctx.x < 0x41 /* 0.001000 */){
         _ctx.x = 0x0 /* 0.000000 */;
      }
   }
   return _ctx.x;
}

void Demo__ctx_type_8_init(Demo__ctx_type_8 &_output_){
   Demo__ctx_type_8 _ctx;
   Demo__ctx_type_5_init(_ctx._inst45e);
   Demo__ctx_type_1_init(_ctx._inst3fd);
   Demo__ctx_type_7_init(_ctx._inst2c7);
   Demo__ctx_type_7_init(_ctx._inst1c7);
   _output_ = _ctx;
   return ;
}

void Demo__ctx_type_9_init(Demo__ctx_type_9 &_output_){
   Demo__ctx_type_9 _ctx;
   _ctx.phase = 0x0 /* 0.000000 */;
   Demo__ctx_type_1_init(_ctx._inst1fd);
   _output_ = _ctx;
   return ;
}

fix16_t Demo_lfo(Demo__ctx_type_9 &_ctx, fix16_t f, uint8_t gate){
   fix16_t rate;
   rate = fix_mul(0xe /* 0.000227 */,f);
   if(Demo_edge(_ctx._inst1fd,gate)){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   _ctx.phase = (_ctx.phase + rate);
   if(_ctx.phase > 0x10000 /* 1.000000 */){
      _ctx.phase = (-0x10000 /* -1.000000 */ + _ctx.phase);
   }
   return (-0x8000 /* -0.500000 */ + fix_sin(fix_mul(0x6487e /* 6.283185 */,_ctx.phase)));
}

void Demo__ctx_type_10_init(Demo__ctx_type_10 &_output_){
   Demo__ctx_type_10 _ctx;
   _ctx.dlow = 0x0 /* 0.000000 */;
   _ctx.dband = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

fix16_t Demo_svf_step(Demo__ctx_type_10 &_ctx, fix16_t input, fix16_t g, fix16_t q, int sel){
   fix16_t low;
   low = (_ctx.dlow + fix_mul(_ctx.dband,g));
   fix16_t high;
   high = (input + (- low) + (- fix_mul(_ctx.dband,q)));
   fix16_t band;
   band = (_ctx.dband + fix_mul(g,high));
   fix16_t notch;
   notch = (high + low);
   _ctx.dband = fix_clip(band,-0x10000 /* -1.000000 */,0x10000 /* 1.000000 */);
   _ctx.dlow = fix_clip(low,-0x10000 /* -1.000000 */,0x10000 /* 1.000000 */);
   fix16_t output;
   switch(sel) {
      case 0:
         output = low;
      break;
      case 1:
         output = high;
      break;
      case 2:
         output = band;
      break;
    default: 
      output = notch;
   }
   return output;
}

void Demo__ctx_type_11_init(Demo__ctx_type_11 &_output_){
   Demo__ctx_type_11 _ctx;
   Demo__ctx_type_10_init(_ctx.step);
   _ctx.g = 0x0 /* 0.000000 */;
   Demo__ctx_type_2_init(_ctx._inst1f1);
   _output_ = _ctx;
   return ;
}

fix16_t Demo_svf(Demo__ctx_type_11 &_ctx, fix16_t input, fix16_t fc, fix16_t q, int sel){
   fc = fix_clip(fc,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   q = fix_clip(q,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   fix16_t fix_q;
   fix_q = ((0x10000 /* 1.000000 */ + (- q)) << 1);
   if(Demo_change(_ctx._inst1f1,fc)){
      _ctx.g = (fc >> 1);
   }
   fix16_t x1;
   x1 = Demo_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   fix16_t x2;
   x2 = Demo_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   return ((x1 + x2) >> 1);
}

void Demo__ctx_type_12_init(Demo__ctx_type_12 &_output_){
   Demo__ctx_type_12 _ctx;
   _ctx.write_pos = 0;
   ;
   _output_ = _ctx;
   return ;
}

fix16_t Demo_delay(Demo__ctx_type_12 &_ctx, fix16_t x, fix16_t time, fix16_t feedback){
   time = fix_clip(time,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   feedback = fix_clip(feedback,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   fix16_t index_r;
   index_r = fix_mul(0x56220000 /* 22050.000000 */,time);
   int index_i;
   index_i = fix_to_int(fix_floor(index_r));
   int delta;
   delta = (_ctx.write_pos + (- index_i));
   int read_pos;
   if(delta < 0){
      read_pos = (22050 + delta);
   }
   else
   {
      read_pos = delta;
   }
   fix16_t decimal;
   decimal = (index_r + (- int_to_fix(index_i)));
   fix16_t x1;
   x1 = fix_get(_ctx.buffer,read_pos);
   fix16_t x2;
   x2 = fix_get(_ctx.buffer,((1 + read_pos) % 22050));
   fix16_t ret;
   ret = (x1 + fix_mul(decimal,(x2 + (- x1))));
   _ctx.write_pos = ((1 + _ctx.write_pos) % 22050);
   fix_set(_ctx.buffer,_ctx.write_pos,fix_clip((x + fix_mul(feedback,ret)),-0x10000 /* -1.000000 */,0x10000 /* 1.000000 */));
   return ret;
}

void Demo__ctx_type_13_init(Demo__ctx_type_13 &_output_){
   Demo__ctx_type_13 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

fix16_t Demo_dcblock(Demo__ctx_type_13 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = (x0 + (- _ctx.x1) + fix_mul(0xfeb8 /* 0.995000 */,_ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Demo__ctx_type_14_init(Demo__ctx_type_14 &_output_){
   Demo__ctx_type_14 _ctx;
   _ctx.pre_phase1 = 0x0 /* 0.000000 */;
   Demo__ctx_type_7_init(_ctx._inst4c7);
   Demo__ctx_type_4_init(_ctx._inst327);
   Demo__ctx_type_0_init(_ctx._inst2c7);
   Demo__ctx_type_4_init(_ctx._inst127);
   _output_ = _ctx;
   return ;
}

fix16_t Demo_voice1(Demo__ctx_type_14 &_ctx, fix16_t pitch, fix16_t detune, fix16_t gate){
   fix16_t phase1;
   phase1 = Demo_phasor(_ctx._inst127,pitch,false);
   fix16_t comp;
   comp = (0x10000 /* 1.000000 */ + (- phase1));
   uint8_t reset;
   reset = ((_ctx.pre_phase1 + (- phase1)) > 0x8000 /* 0.500000 */);
   _ctx.pre_phase1 = phase1;
   fix16_t phase2;
   phase2 = Demo_phasor(_ctx._inst327,(pitch + (Demo_smooth(_ctx._inst2c7,detune) << 5)),reset);
   fix16_t sine;
   sine = fix_sin(fix_mul(0x6487e /* 6.283185 */,phase2));
   return fix_mul(fix_mul(comp,sine),Demo_env(_ctx._inst4c7,gate,0xb333 /* 0.700000 */));
}

void Demo__ctx_type_15_init(Demo__ctx_type_15 &_output_){
   Demo__ctx_type_15 _ctx;
   Demo__ctx_type_12_init(_ctx._inst56d);
   Demo__ctx_type_7_init(_ctx._inst4c7);
   Demo__ctx_type_11_init(_ctx._inst392);
   Demo__ctx_type_13_init(_ctx._inst245);
   Demo__ctx_type_4_init(_ctx._inst127);
   _output_ = _ctx;
   return ;
}

fix16_t Demo_voice2(Demo__ctx_type_15 &_ctx, fix16_t pitch, fix16_t f, fix16_t res, fix16_t time, fix16_t feed, fix16_t gate){
   fix16_t o;
   o = Demo_svf(_ctx._inst392,Demo_dcblock(_ctx._inst245,Demo_phasor(_ctx._inst127,(0xc0000 /* 12.000000 */ + pitch),false)),f,res,0);
   fix16_t oo;
   oo = fix_mul(o,Demo_env(_ctx._inst4c7,gate,0x3333 /* 0.200000 */));
   return ((oo + Demo_delay(_ctx._inst56d,oo,time,feed)) >> 1);
}

void Demo__ctx_type_16_init(Demo__ctx_type_16 &_output_){
   Demo__ctx_type_16 _ctx;
   _ctx.voice2_res = 0x0 /* 0.000000 */;
   _ctx.voice2_pitch = 0x0 /* 0.000000 */;
   _ctx.voice2_gate = 0x0 /* 0.000000 */;
   _ctx.voice2_f = 0x0 /* 0.000000 */;
   _ctx.voice1_pitch = 0x0 /* 0.000000 */;
   _ctx.voice1_gate = 0x0 /* 0.000000 */;
   _ctx.voice1_detune = 0x0 /* 0.000000 */;
   _ctx.time = 0x0 /* 0.000000 */;
   _ctx.feed = 0x0 /* 0.000000 */;
   _ctx.drum_pitch = 0x0 /* 0.000000 */;
   _ctx.drum_gate = 0x0 /* 0.000000 */;
   Demo__ctx_type_15_init(_ctx._inst346);
   Demo__ctx_type_14_init(_ctx._inst21);
   Demo__ctx_type_8_init(_ctx._inst172);
   _output_ = _ctx;
   return ;
}

fix16_t Demo_process(Demo__ctx_type_16 &_ctx, fix16_t input){
   fix16_t drum;
   drum = Demo_drum(_ctx._inst172,_ctx.drum_gate,_ctx.drum_pitch,0x1999 /* 0.100000 */,0xcccc /* 0.800000 */,0x1999 /* 0.100000 */);
   fix16_t voice1_out;
   voice1_out = Demo_voice1(_ctx._inst21,_ctx.voice1_pitch,_ctx.voice1_detune,_ctx.voice1_gate);
   fix16_t voice2_out;
   voice2_out = Demo_voice2(_ctx._inst346,_ctx.voice2_pitch,_ctx.voice2_f,_ctx.voice2_res,_ctx.time,_ctx.feed,_ctx.voice2_gate);
   return fix_mul(0x5555 /* 0.333333 */,(drum + voice1_out + (voice2_out >> 1)));
}

void Demo_noteOn(Demo__ctx_type_16 &_ctx, int note, int velocity, int channel){
   if(note == 12){
      _ctx.drum_gate = 0x10000 /* 1.000000 */;
   }
   if((note >= 24) && (note <= 47)){
      _ctx.voice1_gate = 0x10000 /* 1.000000 */;
      _ctx.voice1_pitch = int_to_fix(note);
   }
   if((note >= 48) && (note <= 80)){
      _ctx.voice2_gate = 0x10000 /* 1.000000 */;
      _ctx.voice2_pitch = int_to_fix(note);
   }
}

void Demo_noteOff(Demo__ctx_type_16 &_ctx, int note, int channel){
   if(note == 12){
      _ctx.drum_gate = 0x0 /* 0.000000 */;
   }
   if((note >= 24) && (note <= 47)){
      _ctx.voice1_gate = 0x0 /* 0.000000 */;
   }
   if((note >= 48) && (note <= 80)){
      _ctx.voice2_gate = 0x0 /* 0.000000 */;
   }
}

void Demo_controlChange(Demo__ctx_type_16 &_ctx, int control, int value, int channel){
   if(control == 30){
      _ctx.drum_pitch = (0x2a0000 /* 42.000000 */ + fix_mul(0x3060 /* 0.188976 */,int_to_fix(value)));
   }
   if(control == 31){
      _ctx.voice1_detune = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 32){
      _ctx.voice2_f = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 33){
      _ctx.voice2_res = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 34){
      _ctx.time = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 35){
      _ctx.feed = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
}


